--- ps3joy.py.original	2021-01-13 01:49:08.284020453 +0000
+++ ps3joy.py	2021-01-14 08:44:39.712584141 +0000
@@ -40,6 +40,7 @@
 import sys
 import traceback
 import subprocess
+from array import array
 
 L2CAP_PSM_HIDP_CTRL = 17
 L2CAP_PSM_HIDP_INTR = 19
@@ -171,6 +172,8 @@
         self.fullstop()  # Probably useless because of uinput startup bug
         self.outlen = len(buttons) + len(axes)
         self.inactivity_timeout = inactivity_timeout
+        self.rumble_cmd = [0, 255]
+        self.led_cmd  = 2
 
     step_active = 1
     step_idle = 2
@@ -191,6 +194,8 @@
                     out.append(int((curbyte & (1 << k)) != 0))
             out = out + data
             self.joy.update(out)
+            with open("/tmp/ps3joy.bin", "wb") as ds3pipe:
+                ds3pipe.write(struct.pack("{}H".format(len(out)), *out))
             axis_motion = [
                 abs(out[17:][i] - self.axmid[i]) > 20 for i in range(0, len(out)-17-4)
             ]  # 17 buttons, 4 inertial sensors
@@ -209,6 +214,20 @@
     def fullstop(self):
         self.joy.update([0] * 17 + self.axmid)
 
+    def send_cmd(self, ctrl):
+        command = [0x52,
+                   0x01,
+                   0x00, 0xfe, self.rumble_cmd[1], 0xfe, self.rumble_cmd[0],        # rumble values
+                   0x00, 0x00, 0x00, 0x00, self.led_cmd,
+                   0xff, 0x27, 0x10, 0x00, 0x32,        # LED 4
+                   0xff, 0x27, 0x10, 0x00, 0x32,        # LED 3
+                   0xff, 0x27, 0x10, 0x00, 0x32,        # LED 2
+                   0xff, 0x27, 0x10, 0x00, 0x32,        # LED 1
+                   0x00, 0x00, 0x00, 0x00, 0x00
+                   ]
+        ctrl.send(array('B', command).tostring())
+
+
     def run(self, intr, ctrl):
         activated = False
         try:
@@ -221,6 +240,10 @@
                     ctrl.send("\x53\xf4\x42\x03\x00\x00")  # Try activating the stream.
                 else:  # Got a frame.
                     if not activated:
+                        self.send_cmd(ctrl)
+                        time.sleep(0.5)
+                        self.rumble_cmd[1] = 0
+                        self.send_cmd(ctrl)
                         print("Connection activated")
                         activated = True
                     try:
@@ -381,7 +404,7 @@
         # Get Root Privileges
         euid = os.geteuid()
         if euid != 0:
-            args = ['sudo', sys.executable] + sys.argv + [os.environ]
+            args = ['sudo', 'LD_LIBRARY_PATH={}'.format(os.environ["LD_LIBRARY_PATH"]),  sys.executable] + sys.argv + [os.environ]
             os.execlpe('sudo', *args)
         if euid != 0:
             raise SystemExit("Root Privlages Required.")
